# -*- coding: utf-8 -*-
"""Books Recommendation System Web App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15SxuRLmfjhd3g4uAwTGNbR1t2rA7j18b

Import neccesary librariers
"""

import pandas as pd
import numpy as np

df = pd.read_csv("/content/books_new.csv")

df.head()

df.tail()

df=pd.read_csv("/content/books_new.csv")
df.head()

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

def build_recommendation_system(csv_file):
    # Load the dataset from CSV file
    df = pd.read_csv("/content/books_new.csv")

    # Fill missing values in text features with empty strings
    df['Title'].fillna('', inplace=True)
    df['Author'].fillna('', inplace=True)

    # Preprocess text features using TF-IDF
    text_features = ['Title', 'Author']
    tfidf_vectorizer = TfidfVectorizer()
    tfidf_matrix = tfidf_vectorizer.fit_transform(df['Title'] + ' ' + df['Author'])

    # Compute cosine similarity between books based on TF-IDF vectors
    cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

    def recommend_books(book_title, num_recommendations=5):
        # Get index of the given book title
        book_index = df[df['Title'] == book_title].index[0]

        # Get pairwise similarities of the given book with all other books
        book_similarities = list(enumerate(cosine_sim[book_index]))

        # Sort the books based on similarity scores
        sorted_books = sorted(book_similarities, key=lambda x: x[1], reverse=True)

        # Exclude the given book itself from the recommended list
        sorted_books = sorted_books[1:]

        # Get the indices of top similar books
        recommended_books_indices = [x[0] for x in sorted_books[:num_recommendations]]

        # Return the titles of recommended books
        recommended_books = df.iloc[recommended_books_indices]['Title'].tolist()
        return recommended_books

    return recommend_books

def user_interface():
    # Create the recommendation system
    recommend_books = build_recommendation_system('/content/books_new.csv')

    # Take input from user
    book_title = input("Enter the title of the book: ")

    try:
        # Get recommendations for the entered book title
        recommended_books = recommend_books(book_title)

        # Display recommendations
        print(f"\nBooks similar to '{book_title}':")
        for i, book in enumerate(recommended_books, start=1):
            print(f"{i}. {book}")
    except IndexError:
        print("Sorry, the entered book title does not exist in the dataset.")

# Call the user interface function
user_interface()