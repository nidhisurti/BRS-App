# -*- coding: utf-8 -*-
"""stremlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13OTLAXnnnSoVuTAfZezsujbctQYiv2oY
"""

#!pip install Streamlit

#!pip install pathlib

from pathlib import Path

def _get_main_script_directory():
    # Get the current working directory.
    cwd = Path.cwd()

    # Iterate through the parent directories until we find the directory containing the 'main.py' file.
    while not (cwd / 'main.py').exists():
        cwd = cwd.parent

    # Return the path to the parent directory of the 'main.py' file.
    return str(cwd.parent)

import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Load the data
@st.cache(hash_funcs={type(lambda:0): lambda _: None})
def load_data():
    books_data = pd.read_csv('/content/books_new.csv')
    return books_data

books_df = load_data()

# TF-IDF Vectorizer
tfidf = TfidfVectorizer(stop_words='english')
books_df['Title'] = books_df['Title'].fillna('')
tfidf_matrix = tfidf.fit_transform(books_df['Title'])

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Function to get book recommendations
def get_recommendations(title, cosine_sim=cosine_sim):
    idx = books_df.loc[books_df['Title'].str.contains(title)].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]
    book_indices = [i[0] for i in sim_scores]
    return books_df['Title'].iloc[book_indices]

# Streamlit App
def main():
    st.title('Books Recommendation System')

    # Sidebar
    st.sidebar.title('Search')
    book_title = st.sidebar.text_input('Enter a book title')

    # Display recommendations
    if book_title:
        recommendations = get_recommendations(book_title)
        if len(recommendations) == 0:
            st.error('No recommendations found.')
        else:
            st.success('Top 10 Recommendations:')
            for i, rec in enumerate(recommendations):
                st.write(f'{i+1}. {rec}')

if __name__ == '__main__':
    main()
